% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R, R/class_FetchConfig.R
\name{FetchConfig}
\alias{FetchConfig}
\alias{FetchConfig.null}
\alias{isFetchConfigNull}
\alias{FetchConfig.load_config}
\alias{FetchConfig.from_files}
\alias{fetch_signal_at_features}
\alias{FetchConfig.save_config}
\alias{show,FetchConfig-method}
\title{FetchConfig}
\usage{
FetchConfig(
  config_df,
  read_mode = NULL,
  view_size = getOption("CT_VIEW_SIZE", 3000),
  window_size = 200,
  fetch_options = list(),
  is_null = FALSE,
  name_VAR = "name"
)

FetchConfig(
  config_df,
  read_mode = NULL,
  view_size = getOption("CT_VIEW_SIZE", 3000),
  window_size = 200,
  fetch_options = list(),
  is_null = FALSE,
  name_VAR = "name"
)

FetchConfig.null()

isFetchConfigNull(fetch_config)

FetchConfig.load_config(signal_config_file, name_VAR = NULL)

FetchConfig.from_files(
  file_paths,
  group_names = NULL,
  name_VAR = "name",
  view_size = getOption("CT_VIEW_SIZE", 3000),
  window_size = getOption("CT_WINDOW_SIZE", 200),
  read_mode = NULL,
  fetch_options = list()
)

fetch_signal_at_features(fetch_config, query_gr, bfc = NULL)

FetchConfig.save_config(object, file)

\S4method{show}{FetchConfig}(object)
}
\arguments{
\item{config_df}{A data.frame containing configuration information for signal
(bam or bigwig) files. Should contain a "file" attribute and entries for
and color_by.}

\item{read_mode}{Read mode of signal data, one of bam_SE, bam_PE, or bigwig.
Use CT_READ_MODES$.}

\item{view_size}{view size in bp to apply. Defaults to 3000.}

\item{window_size}{The window size used when fetching signal. Lower values
increase resolution but also RAM usage. Default is 200 bp.}

\item{fetch_options}{Named list of additional arguments to pass to signal
fetch function.}

\item{is_null}{If TRUE, this FetchConfig is considered null/empty.}

\item{fetch_config}{A FetchConfig object}

\item{signal_config_file}{Configuration file for signal data.}

\item{file_paths}{character paths to files}

\item{group_names}{vector of group names to assign from according to groups}

\item{query_gr}{A GRanges to fetch data for}

\item{cfg}{A FetchConfig object}

\item{group_colors}{vector of colors to use per group}

\item{FetchConfig}{}
}
\value{
A FetchConfig object

A null/empty FetchConfig object

TRUE if object is null placeholder

A FetchConfig object

a FetchConfig object

A list of 2 items prof_dt and query_gr.  prof_dt is a tidy data.table
of signal profiles.  query_gr is a GRanges that may have been modified from
input query_gr if signal profiles are flipped or centered according to
center_signal_at_max or flip_signal_mode in the signal config.

Invisibly returns path to saved config file.
}
\description{
FetchConfig

FetchConfig

FetchConfig null placeholder

isFetchConfigNull

FetchConfig.from_files

FetchConfig.save_config
}
\section{Slots}{

\describe{
\item{\code{view_size}}{Consistent size to use when viewing assessment regions. Uses
CT_VIEW_SIZE option or 3kb as default.}

\item{\code{read_mode}}{Read mode of signal data, one of bam_SE, bam_PE, or bigwig.
Use CT_READ_MODES$.}

\item{\code{fetch_options}}{Named list of additional arguments to pass to signal
fetch function.}
}}

\examples{
bam_config_file = exampleBamConfigFile()
bam_config_df = chiptsne2:::.parse_config_body(bam_config_file)
sig_conf = FetchConfig(bam_config_df)

bigwig_config_file = exampleBigWigConfigFile()
bigwig_config_df = chiptsne2:::.parse_config_body(bigwig_config_file)
sig_conf.bw = FetchConfig(bigwig_config_df)
FetchConfig.null()
cfg.null = FetchConfig.null()
isFetchConfigNull(cfg.null)
bam_config_file = exampleBamConfigFile()
FetchConfig.load_config(bam_config_file)

bigwig_config_file = exampleBigWigConfigFile()
FetchConfig.load_config(bigwig_config_file)
bam_files = dir(
  system.file(
    package = "ssvQC",
    "extdata"),
  pattern = "CTCF.+bam$",
  full.names = TRUE
)
object = FetchConfig.from_files(bam_files)

object2 = FetchConfig.from_files(bam_files,
  group_names = c("MCF10A_CTCF", "MCF10AT1_CTCF", "MCF10CA1a_CTCF")
)
bam_config_file = exampleBamConfigFile()
fetch_config = FetchConfig.load_config(bam_config_file)

query_gr = seqsetvis::CTCF_in_10a_overlaps_gr
chiptsne2:::fetch_signal_at_features(fetch_config, query_gr)
bam_config_file = exampleBamConfigFile()
bam_config = FetchConfig.load_config(bam_config_file)
#FetchConfig.save_config(bam_config, "bam_config.csv")

bigwig_config_file = exampleBigWigConfigFile()
bigwig_config = FetchConfig.load_config(bigwig_config_file)
#FetchConfig.save_config(bigwig_config, "bigwig_config.csv")
}
